{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/tools.ts","webpack:///./src/utils/rectangleChart.ts","webpack:///./src/taskpane/taskpane.ts","webpack:///./src/utils/barChart.ts","webpack:///./src/utils/country.ts","webpack:///./src/utils/columnChart.ts","webpack:///./src/utils/constants.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","input","rowCount","pointItemsCount","Number","isNaN","String","indexOf","console","log","originalRange","orientation","getCell","CommonField","totalRowCount","getAbsoluteResizedRange","originalCell","columnsCount","current","next","steps","length","error","result","increasement","mapRange","targetRange","targetArr","mapArr","values","j","mapIndex","mapVal","push","sheet","set","visibility","sleepTime","start","Date","getTime","flag","Excel","run","context","activeRange","workbook","getSelectedRange","dataTables","getTables","load","sync","dataTable","items","dataSheet","worksheets","getActiveWorksheet","activeTableId","id","table","tables","getItem","wholeRange","getRange","totalColumnCount","columnCount","toolSheet","getItemOrNullObject","toolSheetName","JSON","stringify","lastBarChart","charts","BarChartField","barChartName","lastColumnChart","ColumnChartField","columnChartName","delete","add","Tool","hiddenSheet","toolRange","toolTable","toolTableName","columns","getItemAt","ToolTableField","ToolTableColumnIndex","category","ToolTableColumnName","color","map","categoryBodyRange","getDataBodyRange","curIteratedRange","curIteratedBodyRange","colorBodyRange","mapBodyRange","copyFrom","tmpColorArr","colorList","tmpMapArr","inputElement","document","getElementById","inputPointItems","optionElement","formatInput","targetIteratedBodyRange","getPartialRange","targetCategoryRange","sort","apply","ascending","barChartFlag","chart","ChartType","barClustered","height","chartHeight","width","chartWidth","left","chartLeft","top","chartTop","columnClustered","curheaderRange","title","text","format","font","size","fontSize_Title","legend","visible","categoryAxis","axes","ChartAxisType","setCategoryNames","fontSize_CategoryName","fontSize_AxisValue","series","hasDataLabels","gapWidth","dataLabels","showCategoryName","numberFormat","fontSize_DataLabel","points","sortedColorArr","count","fill","setSolidColor","curIteratedHeaderRange","getHeaderRowRange","countryArray","curCategory","curValue","curMap","curColor","curCountry","Country","nextIteratedHeaderRange","nextIteratedRange","nextArr","mapTargetRangeValue","increaseData","calculateIncrease","splitIncreasement","setIncreasement","step","setValue","updateIncrease","a","b","categoryArray","valueArray","mapArray","colorArray","mapColumn","k","Office","onReady","info","host","HostType","style","display","onclick","CreateBarChart","PlayBarChart","CreateColumnChart","PlayColumnChart","lastLineChart","LineChartField","lineChartName","initLineRange","getLinePartialRange","initCategoryRange","lineChart","line","lineChartHeight","setLabel","showSeriesName","showValue","unsetLabel","linePointSetLabel","dataLabel","linePointUnsetLabel","initRowCount","lineCategoryAxis","initialCell","columnPointer","resizedRange","address","setData","resizedNameRange","CreateBarOrColumnChart","PlayBarOrColumnChart","this","setColor","columnChartFlag"],"mappings":"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","file":"taskpane.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 310);\n","import { CommonField } from \"./constants\";\r\n\r\nexport function formatInput(input: string, rowCount: number): number {\r\n  let pointItemsCount = Number(input);\r\n  if (isNaN(pointItemsCount) || pointItemsCount <= 0 || pointItemsCount > rowCount || String(input).indexOf(\".\") >= 0) {\r\n    console.log(\"please input a integer\");\r\n    pointItemsCount = rowCount - 1;\r\n  }\r\n  return pointItemsCount;\r\n}\r\n\r\n/**\r\n * @param originalRange : BodyRange\r\n * @param pointItemsCount : itemscount that u want\r\n */\r\nexport function getPartialRange(originalRange: Excel.Range, pointItemsCount: number, orientation: number): Excel.Range {\r\n  let partialRange: Excel.Range;\r\n  if (orientation === 1) {\r\n    //for top n\r\n    partialRange = originalRange\r\n      .getCell(CommonField.totalRowCount - pointItemsCount - 1, 0)\r\n      .getAbsoluteResizedRange(pointItemsCount, 1);\r\n  } else {\r\n    partialRange = originalRange.getCell(0, 0).getAbsoluteResizedRange(pointItemsCount, 1);\r\n  }\r\n\r\n  return partialRange;\r\n}\r\n\r\n/**\r\n * @param originalRange : BodyRange\r\n * @param pointItemsCount : itemscount that u want\r\n */\r\nexport function getLinePartialRange(originalCell: Excel.Range, pointItemsCount: number, columnsCount:number): Excel.Range {\r\n  let partialRange: Excel.Range;\r\n  partialRange = originalCell.getAbsoluteResizedRange(pointItemsCount+1, columnsCount);\r\n  return partialRange;\r\n}\r\n\r\n// To calculate the increase for each step between next data list and current data list\r\n//function calculateIncrease(current: Array<Array<number>>, next: Array<Array<number>>, steps: number) {\r\nexport function calculateIncrease(current: any[][], next: any[][], steps: number): any[] {\r\n  if (current.length != next.length) {\r\n    console.error(\"Error! current data length:\" + current.length + \", next data length\" + next.length + \".\");\r\n  }\r\n\r\n  let result = [];\r\n  for (let i = 0; i < current.length; i++) {\r\n    let increasement = (next[i][0] - current[i][0]) / steps;\r\n    result[i] = increasement;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function mapTargetRangeValue(mapRange: Excel.Range, targetRange: Excel.Range): any[][] {\r\n  let targetArr = [];\r\n  let mapArr = mapRange.values;\r\n  for (let j = 0; j < mapArr.length; ++j) {\r\n    let mapIndex = mapArr[j][0];\r\n    let mapVal = targetRange.values[mapIndex][0];\r\n    targetArr.push([mapVal]);\r\n  }\r\n  return targetArr;\r\n}\r\n\r\nexport function hiddenSheet(sheet: Excel.Worksheet):void {\r\n  sheet.set({ visibility: \"Hidden\" });\r\n  // sheet.set({ visibility: \"Visible\"});\r\n}\r\n\r\nexport function sleep(sleepTime: number):void {\r\n  var start = new Date().getTime();\r\n  for (var i = 0; i < 1e7; i++) {\r\n    if (new Date().getTime() - start > sleepTime) {\r\n      break;\r\n    }\r\n  }\r\n}\r\n","import { CommonField, BarChartField, ColumnChartField, ToolTableField } from \"./constants\";\r\nimport { Country } from \"./country\";\r\nimport * as Tool from \"./tools\";\r\n\r\n/**\r\n * create for bar or column chart\r\n */\r\nexport async function CreateBarOrColumnChart(flag: number) {\r\n  try {\r\n    await Excel.run(async context => {\r\n      // Find selected table\r\n      const activeRange = context.workbook.getSelectedRange();\r\n      let dataTables = activeRange.getTables(false);\r\n      dataTables.load(\"items\");\r\n      await context.sync();\r\n\r\n      // Get active table\r\n      let dataTable = dataTables.items[0];\r\n      let dataSheet = context.workbook.worksheets.getActiveWorksheet();\r\n      CommonField.activeTableId = dataTable.id; //id can not be loaded\r\n      let table = dataSheet.tables.getItem(CommonField.activeTableId);\r\n      await context.sync();\r\n\r\n      let wholeRange = table.getRange();\r\n      wholeRange.load(\"rowCount\");\r\n      wholeRange.load(\"columnCount\");\r\n      await context.sync();\r\n      CommonField.totalColumnCount = wholeRange.columnCount;\r\n      CommonField.totalRowCount = wholeRange.rowCount;\r\n\r\n      //create toolTable\r\n      //delete the old chart and sheet\r\n      let toolSheet: Excel.Worksheet;\r\n      toolSheet = context.workbook.worksheets.getItemOrNullObject(CommonField.toolSheetName);\r\n      toolSheet.load();\r\n      await context.sync();\r\n      let lastBarChart: Excel.Chart;\r\n      let lastColumnChart: Excel.Chart;\r\n\r\n      if (JSON.stringify(toolSheet) !== \"{}\") {\r\n        lastBarChart = dataSheet.charts.getItemOrNullObject(BarChartField.barChartName);\r\n        lastColumnChart = dataSheet.charts.getItemOrNullObject(ColumnChartField.columnChartName);\r\n        //chart delete\r\n        lastBarChart.load();\r\n        lastColumnChart.load();\r\n        await context.sync();\r\n        if (JSON.stringify(lastBarChart) !== \"{}\") {\r\n          lastBarChart.delete();\r\n        }\r\n        if (JSON.stringify(lastColumnChart) !== \"{}\") {\r\n          lastColumnChart.delete();\r\n        }\r\n        toolSheet.delete();\r\n      }\r\n      toolSheet = context.workbook.worksheets.add(CommonField.toolSheetName);\r\n\r\n      Tool.hiddenSheet(toolSheet);\r\n      await context.sync();\r\n\r\n      let toolRange = toolSheet.getCell(0, 0).getAbsoluteResizedRange(CommonField.totalRowCount, 4);\r\n      let toolTable = toolSheet.tables.add(toolRange, true);\r\n      toolTable.set({\r\n        name: CommonField.toolTableName\r\n      });\r\n      //set columnName\r\n      toolTable.columns\r\n        .getItemAt(ToolTableField.ToolTableColumnIndex.category)\r\n        .set({ name: ToolTableField.ToolTableColumnName.category });\r\n      toolTable.columns\r\n        .getItemAt(ToolTableField.ToolTableColumnIndex.color)\r\n        .set({ name: ToolTableField.ToolTableColumnName.color });\r\n      toolTable.columns\r\n        .getItemAt(ToolTableField.ToolTableColumnIndex.map)\r\n        .set({ name: ToolTableField.ToolTableColumnName.map });\r\n\r\n      let categoryBodyRange = toolTable.columns.getItem(ToolTableField.ToolTableColumnName.category).getDataBodyRange();\r\n      let curIteratedRange = toolTable.columns.getItemAt(ToolTableField.ToolTableColumnIndex.value).getRange();\r\n      let curIteratedBodyRange = toolTable.columns\r\n        .getItemAt(ToolTableField.ToolTableColumnIndex.value)\r\n        .getDataBodyRange();\r\n      let colorBodyRange = toolTable.columns.getItem(ToolTableField.ToolTableColumnName.color).getDataBodyRange();\r\n      let mapBodyRange = toolTable.columns.getItem(ToolTableField.ToolTableColumnName.map).getDataBodyRange();\r\n\r\n      //copy Range\r\n      categoryBodyRange.copyFrom(table.columns.getItemAt(0).getDataBodyRange());\r\n      curIteratedRange.copyFrom(table.columns.getItemAt(1).getRange()); //copy headers too\r\n\r\n      colorBodyRange.load(\"values\");\r\n      await context.sync();\r\n      let tmpColorArr = [];\r\n      for (let i = 0; i < CommonField.totalRowCount - 1; ++i) {\r\n        tmpColorArr.push([CommonField.colorList[i % CommonField.colorList.length]]);\r\n      }\r\n      colorBodyRange.values = tmpColorArr;\r\n\r\n      mapBodyRange.load(\"values\");\r\n      await context.sync();\r\n      let tmpMapArr = [];\r\n      for (let i = 1; i < CommonField.totalRowCount; ++i) {\r\n        tmpMapArr.push([i]);\r\n      }\r\n      mapBodyRange.values = tmpMapArr;\r\n\r\n      //input\r\n      let inputElement = document.getElementById(\"PointItems\") as HTMLInputElement;\r\n      CommonField.inputPointItems = inputElement.value;\r\n      let optionElement = document.getElementById(\"orientation\") as HTMLOptionElement;\r\n      CommonField.orientation = Number(optionElement.value);\r\n\r\n      //get input and target items\r\n      CommonField.pointItemsCount = Tool.formatInput(CommonField.inputPointItems, CommonField.totalRowCount);\r\n\r\n      let targetIteratedBodyRange = Tool.getPartialRange(\r\n        curIteratedBodyRange,\r\n        CommonField.pointItemsCount,\r\n        CommonField.orientation\r\n      );\r\n      let targetCategoryRange = Tool.getPartialRange(\r\n        categoryBodyRange,\r\n        CommonField.pointItemsCount,\r\n        CommonField.orientation\r\n      );\r\n\r\n      // Create Chart\r\n      toolTable.sort.apply([{ key: 1, ascending: true }], true); //toolTable only does ascending sort\r\n      let chart: Excel.Chart;\r\n      if (flag === BarChartField.barChartFlag) {\r\n        chart = dataSheet.charts.add(Excel.ChartType.barClustered, targetIteratedBodyRange);\r\n        chart.set({\r\n          name: BarChartField.barChartName,\r\n          height: CommonField.chartHeight,\r\n          width: CommonField.chartWidth,\r\n          left: CommonField.chartLeft,\r\n          top: CommonField.chartTop\r\n        });\r\n      } else {\r\n        chart = dataSheet.charts.add(Excel.ChartType.columnClustered, targetIteratedBodyRange);\r\n        chart.set({\r\n          name: ColumnChartField.columnChartName,\r\n          height: CommonField.chartHeight,\r\n          width: CommonField.chartWidth,\r\n          left: CommonField.chartLeft,\r\n          top: CommonField.chartTop\r\n        });\r\n      }\r\n\r\n      let curheaderRange = curIteratedRange.getCell(0, 0);\r\n      curheaderRange.load(\"text\");\r\n      await context.sync();\r\n      // Set chart tile and style\r\n      chart.title.text = curheaderRange.text[0][0];\r\n      chart.title.format.font.set({ size: CommonField.fontSize_Title });\r\n      chart.legend.set({ visible: false });\r\n\r\n      // Set Axis\r\n      let categoryAxis = chart.axes.getItem(Excel.ChartAxisType.category);\r\n      categoryAxis.setCategoryNames(targetCategoryRange);\r\n      categoryAxis.set({ visible: true });\r\n      categoryAxis.format.font.set({ size: CommonField.fontSize_CategoryName });\r\n      let valueAxis = chart.axes.getItem(Excel.ChartAxisType.value);\r\n      valueAxis.format.font.set({ size: CommonField.fontSize_AxisValue });\r\n\r\n      let series = chart.series.getItemAt(0);\r\n      series.set({ hasDataLabels: true, gapWidth: 30 });\r\n      series.dataLabels.set({ showCategoryName: false, numberFormat: \"#,##0\" });\r\n      series.dataLabels.format.font.set({ size: CommonField.fontSize_DataLabel });\r\n      series.points.load();\r\n      await context.sync();\r\n\r\n      colorBodyRange.load(\"values\");\r\n      await context.sync();\r\n      let sortedColorArr = colorBodyRange.values;\r\n\r\n      // Set data points color\r\n      for (let i = 0; i < series.points.count; i++) {\r\n        if (CommonField.orientation === 1) {\r\n          series.points\r\n            .getItemAt(i)\r\n            .format.fill.setSolidColor(\r\n              sortedColorArr[CommonField.totalRowCount - CommonField.pointItemsCount - 1 + i][0]\r\n            );\r\n        } else {\r\n          series.points.getItemAt(i).format.fill.setSolidColor(sortedColorArr[i][0]);\r\n        }\r\n      }\r\n      series.points.load();\r\n\r\n      await context.sync();\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n/**\r\n * play bar or column chart\r\n */\r\nexport async function PlayBarOrColumnChart(flag: number) {\r\n  try {\r\n    await Excel.run(async context => {\r\n      console.log(CommonField.inputPointItems);\r\n      console.log(CommonField.orientation);\r\n      console.log(CommonField.pointItemsCount);\r\n\r\n      let dataSheet = context.workbook.worksheets.getActiveWorksheet();\r\n      let table = dataSheet.tables.getItem(CommonField.activeTableId);\r\n\r\n      //get toolTable\r\n      let toolSheet = context.workbook.worksheets.getItem(CommonField.toolSheetName);\r\n      // let toolTable = dataSheet.tables.getItem(toolTableName);\r\n      let toolTable = toolSheet.tables.getItem(CommonField.toolTableName);\r\n\r\n      let categoryBodyRange = toolTable.columns\r\n        .getItemAt(ToolTableField.ToolTableColumnIndex.category)\r\n        .getDataBodyRange();\r\n      let curIteratedHeaderRange = toolTable.columns\r\n        .getItemAt(ToolTableField.ToolTableColumnIndex.value)\r\n        .getHeaderRowRange();\r\n      let curIteratedBodyRange = toolTable.columns\r\n        .getItemAt(ToolTableField.ToolTableColumnIndex.value)\r\n        .getDataBodyRange();\r\n      let mapBodyRange = toolTable.columns.getItem(ToolTableField.ToolTableColumnName.map).getDataBodyRange();\r\n      let colorBodyRange = toolTable.columns.getItem(ToolTableField.ToolTableColumnName.color).getDataBodyRange();\r\n\r\n      let chart: Excel.Chart;\r\n      if (flag == BarChartField.barChartFlag) {\r\n        chart = dataSheet.charts.getItem(BarChartField.barChartName);\r\n      } else {\r\n        chart = dataSheet.charts.getItem(ColumnChartField.columnChartName);\r\n      }\r\n      //todo splitIncreasement input\r\n\r\n      categoryBodyRange.load(\"values\");\r\n      curIteratedBodyRange.load(\"values\");\r\n      mapBodyRange.load(\"values\");\r\n      colorBodyRange.load(\"values\");\r\n      await context.sync();\r\n\r\n      //initial countryArr\r\n      let countryArray: Country[] = [];\r\n      for (let i = 0; i < CommonField.totalRowCount - 1; ++i) {\r\n        let curCategory = categoryBodyRange.values[i][0];\r\n        let curValue = curIteratedBodyRange.values[i][0];\r\n        let curMap = mapBodyRange.values[i][0];\r\n        let curColor = colorBodyRange.values[i][0];\r\n\r\n        let curCountry = new Country(curCategory, curValue, curMap, 0, curColor);\r\n        countryArray.push(curCountry);\r\n      }\r\n\r\n      // paly\r\n      for (let i = 2; i < CommonField.totalColumnCount; ++i) {\r\n        let nextIteratedHeaderRange = table.columns.getItemAt(i).getHeaderRowRange(); //from table\r\n        let nextIteratedRange = table.columns.getItemAt(i).getRange();\r\n\r\n        nextIteratedRange.load(\"values\");\r\n        curIteratedBodyRange.load(\"values\");\r\n        curIteratedHeaderRange.load(\"text\");\r\n        mapBodyRange.load(\"values\");\r\n        await context.sync();\r\n\r\n        let nextArr = Tool.mapTargetRangeValue(mapBodyRange, nextIteratedRange);\r\n        // Calculate increase based on current value and next value\r\n        let increaseData = Tool.calculateIncrease(curIteratedBodyRange.values, nextArr, CommonField.splitIncreasement);\r\n\r\n        for (let j = 0; j < CommonField.totalRowCount - 1; ++j) {\r\n          countryArray[j].setIncreasement(increaseData[j]);\r\n        }\r\n\r\n        for (let step = 1; step <= CommonField.splitIncreasement; step++) {\r\n          if (step === CommonField.splitIncreasement) {\r\n            mapBodyRange.load(\"values\");\r\n            await context.sync();\r\n            //The mapRange here is the one that was ordered in the previous 'else', and you'll have to take it again because countryArr already sorted.\r\n            nextArr = Tool.mapTargetRangeValue(mapBodyRange, nextIteratedRange);\r\n\r\n            for (let j = 0; j < CommonField.totalRowCount - 1; ++j) {\r\n              countryArray[j].setValue(nextArr[j][0]);\r\n            }\r\n            //set title\r\n            curIteratedHeaderRange.copyFrom(nextIteratedHeaderRange);\r\n          } else {\r\n            // Add increase amount\r\n            for (let j = 0; j < CommonField.totalRowCount - 1; ++j) {\r\n              countryArray[j].updateIncrease();\r\n            }\r\n          }\r\n\r\n          //sort\r\n          countryArray.sort((a: Country, b: Country) => a.value - b.value); //countryArray only does ascending sort\r\n\r\n          //set some value to excel Range\r\n          let categoryArray = [];\r\n          let valueArray = [];\r\n          let mapArray = [];\r\n          let colorArray = [];\r\n          for (let j = 0; j < CommonField.totalRowCount - 1; ++j) {\r\n            categoryArray.push([countryArray[j].name]);\r\n            valueArray.push([countryArray[j].value]); //the chart will use this column\r\n            mapArray.push([countryArray[j].mapColumn]); //this column will be used to map row's number\r\n            colorArray.push([countryArray[j].color]);\r\n          }\r\n          categoryBodyRange.values = categoryArray;\r\n          curIteratedBodyRange.values = valueArray;\r\n          mapBodyRange.values = mapArray;\r\n          colorBodyRange.values = colorArray;\r\n          await context.sync();\r\n\r\n          // Set data points color\r\n          let series = chart.series.getItemAt(0);\r\n          series.load(\"points\");\r\n          colorBodyRange.load(\"values\");\r\n          await context.sync();\r\n          let tmpColorArr = colorBodyRange.values;\r\n          for (let k = 0; k < series.points.count; k++) {\r\n            if (CommonField.orientation === 1) {\r\n              series.points\r\n                .getItemAt(k)\r\n                .format.fill.setSolidColor(\r\n                  tmpColorArr[CommonField.totalRowCount - CommonField.pointItemsCount - 1 + k][0]\r\n                );\r\n            } else {\r\n              series.points.getItemAt(k).format.fill.setSolidColor(tmpColorArr[k][0]);\r\n            }\r\n          }\r\n          series.points.load();\r\n          await context.sync();\r\n        }\r\n\r\n        curIteratedHeaderRange.load(\"text\");\r\n        await context.sync();\r\n        chart.title.text = curIteratedHeaderRange.text[0][0];\r\n        await context.sync();\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\n// Internal used const. DO NOT CHANGE\n\nimport {CommonField,BarChartField, ColumnChartField, LineChartField} from \"../utils/constants\";\nimport * as Tool from \"../utils/tools\";\n// import { CreateLineChart, PlayLineChart } from \"../utils/lineChart\";\n\n// import {LineCopyChart, PlayCopyLine} from \"../utils/lineCopyChart\";\n// import {DynamicSpace4Line, PlayNewLine} from \"../utils/lineDynamicStep\";\n\nimport { CreateBarChart, PlayBarChart } from \"../utils/barChart\";\nimport { CreateColumnChart, PlayColumnChart } from \"../utils/columnChart\";\n\n\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    //line chart\n    // document.getElementById(\"createLineChart\").onclick = CreateLineChart;\n    // document.getElementById(\"playLineChart\").onclick = PlayLineChart;\n    \n    //bar chart\n    document.getElementById(\"createBarChart\").onclick = CreateBarChart;\n    document.getElementById(\"playBarChart\").onclick = PlayBarChart;\n    //column chart\n    document.getElementById(\"createColumnChart\").onclick = CreateColumnChart;\n    document.getElementById(\"playColumnChart\").onclick = PlayColumnChart;\n\n    // // new line chart\n    // document.getElementById(\"lineCopyChart\").onclick = LineCopyChart;\n    // document.getElementById(\"playCopyLine\").onclick = PlayCopyLine;\n\n    // // new line chart\n    // document.getElementById(\"dynamicSpace4Line\").onclick = DynamicSpace4Line;\n    // document.getElementById(\"playNewLine\").onclick = PlayNewLine;\n\n    // slide window line chart\n    // document.getElementById(\"test1\").onclick = test1;\n    // document.getElementById(\"test2\").onclick = test2;\n\n    //ivychart\n    // document.getElementById(\"test3\").onclick = test3;\n\n\n\n  }\n});\n\n\n/**\n * slide window\n */\nexport async function test1() {\n  try {\n    await Excel.run(async context => {\n      // Find selected table\n      const activeRange = context.workbook.getSelectedRange();\n      let dataTables = activeRange.getTables(false);\n      dataTables.load(\"items\");\n      await context.sync();\n\n      // Get active table\n      let dataTable = dataTables.items[0];\n      let dataSheet = context.workbook.worksheets.getActiveWorksheet();\n      CommonField.activeTableId = dataTable.id; //id can not be loaded\n      let table = dataSheet.tables.getItem(CommonField.activeTableId);\n      await context.sync();\n\n      let wholeRange = table.getRange();\n      wholeRange.load(\"rowCount\");\n      wholeRange.load(\"columnCount\");\n      await context.sync();\n      CommonField.totalColumnCount = wholeRange.columnCount;\n      CommonField.totalRowCount = wholeRange.rowCount;\n\n      //create toolTable\n      //delete the old chart and sheet\n      let toolSheet: Excel.Worksheet;\n      toolSheet = context.workbook.worksheets.getItemOrNullObject(CommonField.toolSheetName);\n      toolSheet.load();\n      await context.sync();\n      let lastLineChart: Excel.Chart;\n      let lastBarChart: Excel.Chart;\n      let lastColumnChart: Excel.Chart;\n\n      if (JSON.stringify(toolSheet) !== \"{}\") {\n        lastLineChart = dataSheet.charts.getItemOrNullObject(LineChartField.lineChartName);\n        lastBarChart = dataSheet.charts.getItemOrNullObject(BarChartField.barChartName);\n        lastColumnChart = dataSheet.charts.getItemOrNullObject(ColumnChartField.columnChartName);\n        //chart delete\n        lastLineChart.load();\n        lastBarChart.load();\n        lastColumnChart.load();\n        await context.sync();\n        if (JSON.stringify(lastLineChart) !== \"{}\") {\n          lastLineChart.delete();\n        }\n        if (JSON.stringify(lastBarChart) !== \"{}\") {\n          lastBarChart.delete();\n        }\n        if (JSON.stringify(lastColumnChart) !== \"{}\") {\n          lastColumnChart.delete();\n        }\n        toolSheet.delete();\n      }\n      toolSheet = context.workbook.worksheets.add(CommonField.toolSheetName);\n      let toolRange = toolSheet\n        .getCell(0, 0)\n        .getAbsoluteResizedRange(CommonField.totalRowCount, CommonField.totalColumnCount);\n      let toolTable = toolSheet.tables.add(toolRange, true);\n      toolTable.set({\n        name: CommonField.toolTableName\n      });\n\n      let toolCategoryRange = toolTable.columns.getItemAt(0).getRange();\n      toolCategoryRange.copyFrom(table.columns.getItemAt(0).getRange());\n      // let dataRange = dataTable.getRange();\n      // toolRange.copyFrom(dataRange);\n\n      let toolColumnCollection = toolTable.columns;\n      toolColumnCollection.load(\"count\");\n      await context.sync();\n\n      // let toolColumnCount = toolColumnCollection.count;\n\n      // for(let i=1; i< toolTable.columns.count;++i){\n      for (let i = 1; i < toolTable.columns.count; ++i) {\n        let toolCurRange = toolTable.columns.getItemAt(i).getRange();\n        toolCurRange.copyFrom(table.columns.getItemAt(i).getRange());\n      }\n\n      //input\n      let inputElement = document.getElementById(\"PointItems\") as HTMLInputElement;\n      CommonField.inputPointItems = inputElement.value;\n      let optionElement = document.getElementById(\"orientation\") as HTMLOptionElement;\n      CommonField.orientation = Number(optionElement.value);\n\n      CommonField.pointItemsCount = Tool.formatInput(CommonField.inputPointItems, CommonField.totalRowCount);\n      // let initLineRange = Tool.getLinePartialRange(toolTable.getRange(), CommonField.pointItemsCount, toolColumnCount);\n      let initLineRange = Tool.getLinePartialRange(toolTable.getRange(), CommonField.pointItemsCount, 4);\n      // let initLineRange = Tool.getLinePartialRange(toolTable.getRange(), CommonField.pointItemsCount, 11);\n\n      let initCategoryRange = toolTable\n        .getRange()\n        .getCell(0, 1)\n        .getAbsoluteResizedRange(1, 3);\n\n      if (CommonField.orientation == 1) {\n        toolTable.sort.apply([{ key: 1, ascending: false }], true);\n      } else {\n        toolTable.sort.apply([{ key: 1, ascending: true }], true);\n      }\n      let lineChart = dataSheet.charts.add(Excel.ChartType.line, initLineRange, \"Rows\");\n      let lineChartHeight = CommonField.chartHeight - 50;\n      lineChart.set({\n        name: LineChartField.lineChartName,\n        height: lineChartHeight,\n        width: CommonField.chartWidth,\n        left: CommonField.chartLeft,\n        top: CommonField.chartTop\n      });\n      let categoryAxis = lineChart.axes.getItem(Excel.ChartAxisType.category);\n      categoryAxis.setCategoryNames(initCategoryRange);\n\n      let setLabel = {\n        showSeriesName: true,\n        showValue: true,\n        numberFormat: \"#,##0\"\n      };\n      let unsetLabel = {\n        showSeriesName: false,\n        showValue: false\n      };\n      LineChartField.linePointSetLabel = {\n        dataLabel: setLabel\n      };\n      LineChartField.linePointUnsetLabel = {\n        dataLabel: unsetLabel\n      };\n\n      initLineRange.load(\"rowCount\");\n      await context.sync();\n      let initRowCount = initLineRange.rowCount;\n      console.log(initRowCount);\n      // for (let i = initRowCount - 2; i >= 0; --i) {\n      //   //getItem(1):The first two columns, only the rightmost column is displayed.\n      //   lineChart.series\n      //     .getItemAt(i)\n      //     .points.getItemAt(1)\n      //     .set(LineChartField.linePointSetLabel);\n      // }\n      lineChart.title.text = \"LineChart\";\n      await context.sync();\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\nexport async function test2() {\n  try {\n    await Excel.run(async context => {\n      let dataSheet = context.workbook.worksheets.getActiveWorksheet();\n      // let table = dataSheet.tables.getItem(CommonField.activeTableId);\n\n      //get toolTable\n      let toolSheet = context.workbook.worksheets.getItem(CommonField.toolSheetName);\n      let toolTable = toolSheet.tables.getItem(CommonField.toolTableName);\n      let lineChart = dataSheet.charts.getItem(LineChartField.lineChartName);\n      let lineCategoryAxis = lineChart.axes.getItem(Excel.ChartAxisType.category);\n\n      let initialCell = toolTable.getRange().getCell(0, 0);\n      initialCell.load();\n      await context.sync();\n\n      // for(let columnPointer = 3;columnPointer<CommonField.totalColumnCount;++columnPointer){\n      for (let columnPointer = 4; columnPointer < CommonField.totalColumnCount; ++columnPointer) {\n        //remove original datalabel\n        // for (let j = CommonField.pointItemsCount - 1; j >= 0; --j) {\n        //   lineChart.series\n        //     .getItemAt(j)\n        //     .points.getItemAt(columnPointer - 2)\n        //     .set(LineChartField.linePointUnsetLabel); //getItemAt(i - 3): pionts count from 0.\n        // }\n        // await context.sync();\n\n        // let resizedRange = Tool.getLinePartialRange(initialCell, CommonField.pointItemsCount, columnPointer);\n        initialCell = toolTable.getRange().getCell(0, columnPointer-3);\n        let resizedRange = Tool.getLinePartialRange(initialCell, CommonField.pointItemsCount, 3);\n\n        resizedRange.load(\"address\");\n        await context.sync();\n        console.log(resizedRange.address);\n\n        if (CommonField.orientation === 1) {\n          toolTable.sort.apply([{ key: columnPointer, ascending: false }], true);\n        } else {\n          toolTable.sort.apply([{ key: columnPointer, ascending: true }], true);\n        }\n\n        lineChart.setData(resizedRange, \"Rows\"); //dynamic change chart\n\n        //set categoryName\n        let resizedNameRange = resizedRange.getCell(0, 1).getAbsoluteResizedRange(1, 3);\n        lineCategoryAxis.setCategoryNames(resizedNameRange);\n\n        //set new datalabel\n        // for (let j = CommonField.pointItemsCount - 1; j >= 0; --j) {\n        //   lineChart.series\n        //     .getItemAt(j)\n        //     .points.getItemAt(columnPointer - 1)\n        //     .set(LineChartField.linePointSetLabel);\n        // }\n        await context.sync();\n        // Tool.sleep(500);\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n","import { BarChartField } from \"./constants\";\r\nimport { CreateBarOrColumnChart, PlayBarOrColumnChart } from \"./rectangleChart\";\r\n\r\n/**\r\n * create for bar chart\r\n */\r\nexport async function CreateBarChart() {\r\n  try {\r\n    await CreateBarOrColumnChart(BarChartField.barChartFlag);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n/**\r\n * play for bar chart\r\n */\r\nexport async function PlayBarChart() {\r\n  try {\r\n    await PlayBarOrColumnChart(BarChartField.barChartFlag);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n","export class Country {\r\n  name: string;\r\n  value: number;\r\n  mapColumn: number;\r\n  increasement: number;\r\n  color: string;\r\n\r\n  constructor(name: string, value: number, mapColumn: number, increasement: number, color: string) {\r\n    this.name = name;\r\n    this.value = value;\r\n    this.mapColumn = mapColumn;\r\n    this.increasement = increasement;\r\n    this.color = color;\r\n  }\r\n\r\n  setValue(value: number): void {\r\n    this.value = value;\r\n  }\r\n\r\n  setIncreasement(increasement: number) {\r\n    this.increasement = increasement;\r\n  }\r\n\r\n  setColor(color: string) {\r\n    this.color = color;\r\n  }\r\n\r\n  updateIncrease(): void {\r\n    this.value = this.value + this.increasement;\r\n  }\r\n}","import { ColumnChartField } from './constants';\r\nimport { CreateBarOrColumnChart, PlayBarOrColumnChart } from './rectangleChart';\r\n\r\n/**\r\n * create for column chart\r\n */\r\nexport async function CreateColumnChart() {\r\n  try {\r\n    await CreateBarOrColumnChart(ColumnChartField.columnChartFlag);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n/**\r\n * play for column chart\r\n */\r\nexport async function PlayColumnChart() {\r\n  try {\r\n    await PlayBarOrColumnChart(ColumnChartField.columnChartFlag);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n","export module CommonField {\r\n  export let activeTableId;\r\n  export let inputPointItems: any;\r\n  export let orientation: number;\r\n\r\n  export let pointItemsCount: number;\r\n\r\n  //for original table\r\n  export let totalColumnCount: number;\r\n  export let totalRowCount: number;\r\n\r\n  //--------------------------------\r\n  // Parameters. Modify it if needed.\r\n  export const chartWidth = 750,\r\n    chartHeight = 550,\r\n    chartLeft = 150,\r\n    chartTop = 50;\r\n\r\n  export const splitIncreasement = 2;\r\n\r\n  export const colorList = [\r\n    \"#afc97a\",\r\n    \"#cd7371\",\r\n    \"#729aca\",\r\n    \"#b65708\",\r\n    \"#276a7c\",\r\n    \"#4d3b62\",\r\n    \"#5f7530\",\r\n    \"#772c2a\",\r\n    \"#2c4d75\",\r\n    \"#f79646\",\r\n    \"#4bacc6\",\r\n    \"#8064a2\",\r\n    \"#9bbb59\",\r\n    \"#c0504d\",\r\n    \"#4f81bd\"\r\n  ];\r\n  export const fontSize_Title = 28,\r\n    fontSize_CategoryName = 13,\r\n    fontSize_AxisValue = 11,\r\n    fontSize_DataLabel = 13;\r\n\r\n  // Internal used const. DO NOT CHANGE\r\n  //for barChart and columnChart and tool\r\n  export const toolSheetName = \"toolSheet9527\"; //+UUID\r\n  export const toolTableName = \"toolTable9527\"; //+UUID\r\n}\r\n\r\nexport module LineChartField {\r\n  //for line chart\r\n  export let lineChartName = \"LineChartName9527\";\r\n  export let linePointSetLabel;\r\n  export let linePointUnsetLabel;\r\n  // let seriesUpdate;\r\n}\r\n\r\nexport module BarChartField {\r\n  export const barChartName = \"BarChartName9527\";\r\n  export const barChartFlag = 1;\r\n}\r\n\r\nexport module ColumnChartField {\r\n  export const columnChartName = \"ColumnChartName9527\";\r\n  export const columnChartFlag = 2;\r\n}\r\n\r\nexport module ToolTableField {\r\n  export enum ToolTableColumnIndex {\r\n    category = 0,\r\n    value = 1,\r\n    color = 2,\r\n    map = 3\r\n  }\r\n\r\n  export enum ToolTableColumnName {\r\n    category = \"categoryColumn\",\r\n    //value\r\n    color = \"colorColumn\",\r\n    map = \"mapColumn\"\r\n  }\r\n}\r\n"],"sourceRoot":""}